#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('web:server');
const http = require('http');
const mongo = require('../system/db/mongo');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8083');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Graceful Shutdown 
 */


process.on('SIGINT', () => {
    console.log('SIGINT signal received. Shutting down server (gracefully; maybe.)');
    const cleanUp = () => {
        mongo.closeDbConn();
    };

    server.close(() => {
        console.log('Server shut down.');
        cleanUp();
        process.exit();
    });
    // Force close server after 4secs
    setTimeout((e) => {
        console.log('Forcing server to shut down.', e);
        cleanUp();
        process.exit(1);
    }, 4000)
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

module.exports = server;